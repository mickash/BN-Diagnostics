library(DiagnosticsEval)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 3/group3.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
library(DiagnosticsEval)
testDiagnostics(myLearn,myDiagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 12/solution.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 24/myFunction.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 35/prj3.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 58/diagnostics.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 66/Diagnostics.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 72/BNDiagnostic.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 75/Diagnostics_AdamSchon.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 77/myFunction.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 87/myDiagnostics.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 88/Grans-Diagnostics.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 96/myFuncsHcoded.r', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 100/solution.r', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 120/project3_dani5126.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 123/Lab3_Group123.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
rm(list=ls())
learn <- function(hist) {
Pn = 0
Te_Pn = c()
Te_nPn = c()
VTB = 0
TB_VTB = 0
TB_nVTB = 0
Sm = 0
LC_Sm = 0
LC_nSm = 0
Br_Sm = 0
Br_nSm = 0
XR = matrix(data = 0, nrow = 8, ncol = 2, byrow = FALSE, dimnames = NULL)
DY = matrix(data = 0, nrow = 4, ncol = 2, byrow = FALSE, dimnames = NULL)
for(i in 1:10000) {
if(hist[i,1] == 1) {
Pn = Pn + 1
Te_Pn = append(Te_Pn, hist[i,2])
if(hist[i,4] == 0) {
if(hist[i,6] == 0) {
XR[5,2] = XR[5,2] + 1
if(hist[i,8] == 1) {
XR[5,1] = XR[5,1] + 1
}
} else {
XR[6,2] = XR[6,2] + 1
if(hist[i,8] == 1) {
XR[6,1] = XR[6,1] + 1
}
}
} else {
if(hist[i,6] == 0) {
XR[7,2] = XR[7,2] + 1
if(hist[i,8] == 1) {
XR[7,1] = XR[7,1] + 1
}
} else {
XR[8,2] = XR[8,2] + 1
if(hist[i,8] == 1) {
XR[8,1] = XR[8,1] + 1
}
}
}
} else {
Te_nPn = append(Te_nPn, hist[i,2])
if(hist[i,4] == 0) {
if(hist[i,6] == 0) {
XR[1,2] = XR[1,2] + 1
if(hist[i,8] == 1) {
XR[1,1] = XR[1,1] + 1
}
} else {
XR[2,2] = XR[2,2] + 1
if(hist[i,8] == 1) {
XR[2,1] = XR[2,1] + 1
}
}
} else {
if(hist[i,6] == 0) {
XR[3,2] = XR[3,2] + 1
if(hist[i,8] == 1) {
XR[3,1] = XR[3,1] + 1
}
} else {
XR[4,2] = XR[4,2] + 1
if(hist[i,8] == 1) {
XR[4,1] = XR[4,1] + 1
}
}
}
}
if(hist[i,3] == 1) {
VTB = VTB + 1
if(hist[i,4] == 1) {
TB_VTB = TB_VTB +1
}
} else {
if(hist[i,4] == 1) {
TB_nVTB = TB_nVTB + 1
}
}
if(hist[i,5] == 1) {
Sm = Sm + 1
if(hist[i,6] == 1) {
LC_Sm = LC_Sm +1
}
if(hist[i,7] ==1) {
Br_Sm = Br_Sm + 1
}
} else {
if(hist[i,6] == 1) {
LC_nSm = LC_nSm + 1
}
if(hist[i,7] == 1) {
Br_nSm = Br_nSm + 1
}
}
if(hist[i,6] == 0) {
if(hist[i,7] == 0) {
DY[1,2] = DY[1,2] + 1
if(hist[i,9] == 1) {
DY[1,1] = DY[1,1] + 1
}
} else {
DY[2,2] = DY[2,2] + 1
if(hist[i,9] == 1) {
DY[2,1] = DY[2,1] + 1
}
}
} else {
if(hist[i,7] == 0) {
DY[3,2] = DY[3,2] + 1
if(hist[i,9] == 1) {
DY[3,1] = DY[3,1] + 1
}
} else {
DY[4,2] = DY[4,2] + 1
if(hist[i,9] == 1) {
DY[4,1] = DY[4,1] + 1
}
}
}
}
pPn = Pn/10010
pVTB = VTB/10010
pSm = Sm/10010
pTB = list(TB_VTB/VTB, TB_nVTB/(10000-VTB))
pLC = list(LC_Sm/Sm, LC_nSm/(10000-Sm))
pBr = list(Br_Sm/Sm, Br_nSm/(10000-Sm))
pXR = list()
for(i in 1:nrow(XR)) {
pXR = append(pXR, list(XR[i,1]/XR[i,2]))
}
pDY = list()
for(i in 1:nrow(DY)) {
pDY = append(pDY, list(DY[i,1]/DY[i,2]))
}
mean = mean(Te_Pn)
s = sd(Te_Pn)
pTe_pn = list(mean, s)
mean = mean(Te_nPn)
s = sd(Te_nPn)
pTe_nPn = list(mean, s)
pTe = list(pTe_pn, pTe_nPn)
network = list(pPn=pPn, pTe=pTe, pVTB=pVTB, pSm=pSm, pTB=pTB, pLC=pLC, pBr=pBr, pXR=pXR, pDY=pDY)
return(network)
}
diagnose <- function(network, cases) {
sampleProb = matrix(data = 0, nrow = 10, ncol = 4)
for(i in 1:10) {
case = cases[i,]
#initialize with random numbers
rand = runif(1, 0, 1)
if(rand < 0.5) {
case[[1]] = 0
} else {
case[[1]] = 1
}
rand = runif(1, 0, 1)
if(rand < 0.5) {
case[[4]] = 0
} else {
case[[4]] = 1
}
rand = runif(1, 0, 1)
if(rand < 0.5) {
case[[6]] = 0
} else {
case[[6]] = 1
}
rand = runif(1, 0, 1)
if(rand < 0.5) {
case[[7]] = 0
} else {
case[[7]] = 1
}
samples = case
for(j in 1:1100) {
probOld = probabilityCalc(network, case)
tempCase = case
tempCase[[1]] = abs(tempCase[[1]]-1)
probNew = probabilityCalc(network, tempCase)
##choose temp or old
prob = probNew/probOld
rand = runif(1, 0, 1)
if(rand < prob) {
case = tempCase
probOld = probNew
}
tempCase = case
tempCase[[4]] = abs(tempCase[[4]]-1)
probNew = probabilityCalc(network, tempCase)
prob = probNew/probOld
rand = runif(1, 0, 1)
if(rand < prob) {
case = tempCase
probOld = probNew
}
tempCase = case
tempCase[[6]] = abs(tempCase[[6]]-1)
probNew = probabilityCalc(network, tempCase)
prob = probNew/probOld
rand = runif(1, 0, 1)
if(rand < prob) {
case = tempCase
probOld = probNew
}
tempCase = case
tempCase[[7]] = abs(tempCase[[7]]-1)
probNew = probabilityCalc(network, tempCase)
prob = probNew/probOld
rand = runif(1, 0, 1)
if(rand < prob) {
case = tempCase
probOld = probNew
}
##one sample case generated
samples[j, ] = case
}
##calculate probability
Pn = 0
TB = 0
LC = 0
Br = 0
for(j in 101:1100) {
if(samples[j,1] == 1) {
Pn = Pn + 1
}
if(samples[j,4] == 1) {
TB = TB + 1
}
if(samples[j,6] == 1) {
LC = LC + 1
}
if(samples[j,7] == 1) {
Br = Br + 1
}
}
sampleProb[i,1] = Pn/1000
sampleProb[i,2] = TB/1000
sampleProb[i,3] = LC/1000
sampleProb[i,4] = Br/1000
}
return(sampleProb)
}
probabilityCalc <- function(network, case) {
pPn = switch(case[[1]]+1, 1-network$pPn, network$pPn)
pTe = switch(case[[1]]+1, pnorm(case[[2]], mean=network$pTe[[2]][[1]], sd=network$pTe[[2]][[2]], lower.tail=FALSE), pnorm(case[[2]], mean=network$pTe[[1]][[1]], sd=network$pTe[[1]][[2]], lower.tail=TRUE))
pVTB = switch(case[[3]]+1, 1-network$pVTB, network$pVTB)
pSm = switch(case[[5]]+1, 1-network$pSm, network$pSm)
pTB = switch(case[[3]]+1, switch(case[[4]]+1, 1-network$pTB[[2]], network$pTB[[2]]), switch(case[[4]]+1, 1-network$pTB[[1]], network$pTB[[1]]))
pLC = switch(case[[5]]+1, switch(case[[6]]+1, 1-network$pLC[[2]], network$pLC[[2]]), switch(case[[6]]+1, 1-network$pLC[[1]], network$pLC[[1]]))
pBr = switch(case[[5]]+1, switch(case[[7]]+1, 1-network$pBr[[2]], network$pBr[[2]]), switch(case[[7]]+1, 1-network$pBr[[1]], network$pBr[[1]]))
if(case[[1]] == 0) {
if(case[[4]] == 0) {
if(case[[6]] == 0) {
if(case[[8]] == 0) {
pXR = 1-network$pXR[[1]]
} else {
pXR = network$pXR[[1]]
}
} else {
if(case[[8]] == 0) {
pXR = 1-network$pXR[[2]]
} else {
pXR = network$pXR[[2]]
}
}
} else {
if(case[[6]] == 0) {
if(case[[8]] == 0) {
pXR = 1-network$pXR[[3]]
} else {
pXR = network$pXR[[3]]
}
} else {
if(case[[8]] == 0) {
pXR = 1-network$pXR[[4]]
} else {
pXR = network$pXR[[4]]
}
}
}
} else {
if(case[[4]] == 0) {
if(case[[6]] == 0) {
if(case[[8]] == 0) {
pXR = 1-network$pXR[[5]]
} else {
pXR = network$pXR[[5]]
}
} else {
if(case[[8]] == 0) {
pXR = 1-network$pXR[[6]]
} else {
pXR = network$pXR[[6]]
}
}
} else {
if(case[[6]] == 0) {
if(case[[8]] == 0) {
pXR = 1-network$pXR[[7]]
} else {
pXR = network$pXR[[7]]
}
} else {
if(case[[8]] == 0) {
pXR = 1-network$pXR[[8]]
} else {
pXR = network$pXR[[8]]
}
}
}
}
pDY = switch(case[[6]]+1, switch(case[[7]]+1, switch(case[[9]]+1, 1-network$pDY[[1]], network$pDY[[1]]), switch(case[[9]]+1, 1-network$pDY[[2]], network$pDY[[2]])), switch(case[[7]]+1, switch(case[[9]]+1, 1-network$pDY[[3]], network$pDY[[3]]), switch(case[[9]]+1, 1-network$pDY[[4]], network$pDY[[4]])))
prob = pPn*pTe*pVTB*pSm*pTB*pLC*pBr*pXR*pDY
return(prob)
}
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 149/diagnostics.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 149/diagnostics.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 72/BNDiagnostic.R', echo=TRUE)
testDiagnostics(learn,diagnose,102,102)
testDiagnostics(bnLearn,bnDiagnose,102,102)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 81/D_1.4.R', echo=TRUE)
testDiagnostics(learn,diagnose,102,102)
rm(list=ls())
testDiagnostics(bnLearn,bnDiagnose,102,102)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 77/myFunction.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,102,102)
testDiagnostics(myLearn,myDiagnose,103,103)
testDiagnostics(bnLearn,bnDiagnose,103,103)
testDiagnostics(myLearn,myDiagnose,104,104)
testDiagnostics(bnLearn,bnDiagnose,104,104)
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 120/project3_dani5126.R', echo=TRUE)
testDiagnostics(myLearn,,myDiagnose,101,101)
testDiagnostics(myLearn,myDiagnose,101,101)
testDiagnostics(myLearn,myDiagnose,102,102)
testDiagnostics(myLearn,myDiagnose,103,103)
testDiagnostics(myLearn,myDiagnose,104,104)
testDiagnostics(myLearn,myDiagnose,105,105)
testDiagnostics(bnLearn,bnDiagnose,105,105)
testDiagnostics(bnLearn,bnDiagnose,104,104)
testDiagnostics(bnLearn,bnDiagnose,102,102)
testDiagnostics(bnLearn,bnDiagnose,106,106)
testDiagnostics(myLearn,myDiagnose,106,106)
for (i in 1:10) {
s=sample(10000,1)
cat ("\nSeed:",s)
print ("Par:")
print(testDiagnostics(bnLearn,bnDiagnose,s,s))
print ("Student:")
print(testDiagnostics(myLearn,myDiagnose,s,s))
}
for (i in 1:10) {
s=sample(10000,1)
cat ("\nSeed:",s)
r=testDiagnostics(bnLearn,bnDiagnose,s,s)
cat("\nPar:",r[1])
r=testDiagnostics(myLearn,myDiagnose,s,s)
cat("\nStudent:",r[1])
}
rm(list=ls())
source('~/Courses/AI/2018/Projects/assignments 3/Group 77/myFunction.R', echo=TRUE)
for (i in 1:10) {
s=sample(10000,1)
cat ("\nSeed:",s)
r=testDiagnostics(bnLearn,bnDiagnose,s,s)
cat("\nPar:",r[1])
r=testDiagnostics(myLearn,myDiagnose,s,s)
cat("\nStudent:",r[1])
}
for (i in 1:10) {
s=sample(10000,1)
cat ("\nSeed:",s)
r=testDiagnostics(bnLearn,bnDiagnose,s,s)
cat("\nPar:",r[1])
r=testDiagnostics(myLearn,myDiagnose,s,s)
cat("\nStudent:",r[1])
}
source('~/Courses/AI/2018/Projects/assignments 3/Group 81/D_1.4.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
library(DiagnosticsEval)
testDiagnostics(myLearn,myDiagnose,101,101)
testDiagnostics(learn,diagnose,101,101)
SolveCasesAnalytically
AIEXam::makeQuestionHMM_Vit
AIExam::makeQuestionHMM_Vit
AIExam::makeQuestionHMM_Vit()
library(DiagnosticsEval)
testDiagnostics(bnLearn,bnDiagnose)
testDiagnostics(bnLearn,bnDiagnose,verbose=2)
Diagnostics::testDiagnostics(bnLearn,bnDiagnose,verbose=2)
Diagnostics::runDiagnostics(bnLearn,bnDiagnostics)
Diagnostics::runDiagnostics(bnLearn,bnDiagnose,verbose=2)
a=c(1,3)
b=c(2,3)
which(a==1 & b==3)
d=data.frame(m)
library(DiagnosticsEval)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 10/group_10.r', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 22/Diagnostics.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 22/Diagnostics.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 22/Diagnostics.R', echo=TRUE)
testDiagnostics(bn.learn,diagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 22/Diagnostics.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 22/Diagnostics.R', echo=TRUE)
testDiagnostics(bn.learn,diagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 22/Diagnostics.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 23/P3.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 23/P3.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 23/P3.R', echo=TRUE)
testDiagnostics(bn.learn,diagnose,101,101)
temp_holder$Te
temp_holder
source('~/Courses/AI/2018/Projects/late assignments 3/Group 23/P3.R', echo=TRUE)
testDiagnostics(bn.learn,diagnose,101,101)
temp_holder
temp_holder$Te
dnorm(temp_holder$Te,network$Te[temp_holder$Pn + 1, 1], network$Te[temp_holder$Pn + 1, 2])
network$Te[temp_holder$Pn + 1, 2]
network$Te[temp_holder$Pn + 1, 1])
network$Te[temp_holder$Pn + 1, 1]
source('~/Courses/AI/2018/Projects/late assignments 3/Group 28/learn.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 28/diagnose.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 53/diagnostics1.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 64/diagnostics.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 64/diagnostics.R', echo=TRUE)
testDiagnostics(learnFunc,diagnoseFunc,101,101)
rm(list=ls())
source('~/Courses/AI/2018/Projects/late assignments 3/Group 77/myFunction.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 120/project3_dani5126.R', echo=TRUE)
testDiagnostics(myLearn,myDiagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 149/diagnostics.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 53/diagnostics1.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 23/P3.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
source('~/Courses/AI/2018/Projects/late assignments 3/Group 23/P3.R', echo=TRUE)
testDiagnostics(learn,diagnose,101,101)
source('~/Courses/AI/2018/Projects/After Course Submission/diagnostics_yuxin_shen.R', echo=TRUE)
library(DiagnosticsEval)
DiagnosticsEval::testDiagnostics(learn,diagnose,101,101)
DiagnosticsEval::testDiagnostics(bnLearn,bnDiagnose,101,101)
Diagnostics::hist
learn(Diagnostics::hist)
source('~/Courses/AI/2018/Projects/After Course Submission/diagnostics_yuxin_shen.R', echo=TRUE)
source('~/Courses/AI/2018/Projects/After Course Submission/diagnostics_yuxin_shen.R', echo=TRUE)
learn(Diagnostics::hist)
source('~/Courses/AI/2018/Projects/After Course Submission/diagnostics_yuxin_shen.R', echo=TRUE)
learn(Diagnostics::hist)
